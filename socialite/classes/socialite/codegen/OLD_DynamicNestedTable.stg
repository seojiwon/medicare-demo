group dynamic-nested-table;
import "TableCommon.stg"

dynamicNestedTable(tableName, name, visitorClass, nestedTable, classes, methods, 
		size, id, 
		columns, nestedColumns, nestedNestedColumns, gbColumns, gbNestedColumns, gbAggrColumn,
		sortedCol, idxCols, sortOrder="Asc", inplaceSort=false,
		groupbyVisit="", groupbySingleRow=false, 
		multiSet=false, isNested=false) ::= <<
<if(!isNested)>
package socialite.tables;

<importForTable()>
<endif>

// dynamicNestedTable
<if(isNested)>static<else>public<endif> class <name> extends AbstractTableInst {
	private static final long serialVersionUID = 1;
	
	public static double theRowSize() {
		return <nestedColumns:{c|<c.typeSize>};separator="+">+
			   <columns:{c|+<c.typeSize>/2}>;
	}
	public static int tableid() { return <id>; }
	
	public static <name> create() { return new <name>(<size>); }
	public static <name> create(int capacity) { return new <name>(capacity); }

	<columns:{c|<getContainer(c.type)> col<i0>;<\n>}>;
	SArrayList\<<nestedTable>\> nestedTables;
	<idxCols:{ic|SIndex index<ic.relPos>;<\n>}>
<if(gbColumns)>
	GroupbyMap groupbyMap;
	Tuple<gbColumns:{g|_<TupleMap.(g.type)>}> groupbyTup = 
						new Tuple<gbColumns:{g|_<TupleMap.(g.type)>}>();
<endif>
<if(sortedCol && !inplaceSort)>	 
	SIntArrayList sortedIdx;
	<getContainer(sortedCol.type)> sortedCol;
<endif>
	int tupleNum;
	
	public <name>() { }
	
	public <name>(int capacity) {
		<columns:{c|col<i0>=new <ContainerMap.(c.type)>(capacity);<\n>}>
		<idxCols:{ic|index<ic.relPos> = new SIndex(capacity, <length(columns)>);<\n>}>
		nestedTables = new SArrayList\<<nestedTable>\>(capacity);
		<if(gbColumns)>groupbyMap = new GroupbyMap(capacity);<endif>
		
		<if(sortedCol && !inplaceSort)>
		sortedIdx = new SIntArrayList();
		sortedCol = new <getContainer(sortedCol.type)>(); 
		<endif>	
	}

<columns:{c|private <c.type> col<i0>(int i) { return col<i0>.getQuick(i);\}<\n>}>
	
	public double rowSize() { return <name>.theRowSize(); }
	public int size() { return tupleNum; }
	public int id() { return <id>; }
	public boolean requireFree() { return false; }	
	public void free() {}
	public String name() { return "<tableName>"; }
	
	public TableInst copy() {
		Assert.not_supported();
		return null;
	}
	public void addAllFast(TableInst inst) {
		Assert.not_supported();
	}	
	
	public void clear() { clearQuick(); }
	public void clearQuick() {	
		<columns:{c|col<i0>.resetQuick();<\n>}>
		<idxCols:{ic|index<ic.relPos>.clear();}>
		<if(sortedCol && !inplaceSort)>
		sortedIdx.resetQuick();
		sortedCol.resetQuick();
		<endif>		
		<if(gbColumns)>groupbyMap.clear();<endif>
		for (<nestedTable> t:nestedTables)
			t.clearQuick();
		tupleNum=0;		
	}	
		
	int firstIndex(Object col, int pos) {
		if (col instanceof TIntArrayList) {
			TIntArrayList list=(TIntArrayList)col;
			<firstIdx("int", "list", "pos")>;			
		} else if (col instanceof TLongArrayList) {
			TLongArrayList list=(TLongArrayList)col;
			<firstIdx("long", "list", "pos")>;
		} else if (col instanceof TFloatArrayList) {
			TFloatArrayList list=(TFloatArrayList)col;
			<firstIdx("float", "list", "pos")>;
		} else if (col instanceof TDoubleArrayList) {
			TDoubleArrayList list=(TDoubleArrayList)col;
			<firstIdx("double", "list", "pos")>;
		} else if (col instanceof SArrayList) {
			SArrayList list=(SArrayList)col;
			<firstIdxObj("list", "pos")>;
		} else {
		    Assert.not_implemented("firstIndex()");
		    return -1;
		}
	}
	int lastIndex(Object col, int pos) {
		if (col instanceof TIntArrayList) {
			TIntArrayList list=(TIntArrayList)col;
			<lastIdx("int", "list", "pos")>;			
		} else if (col instanceof TLongArrayList) {
			TLongArrayList list=(TLongArrayList)col;
			<lastIdx("long", "list", "pos")>;			
		} else if (col instanceof TFloatArrayList) {
			TFloatArrayList list=(TFloatArrayList)col;
			<lastIdx("float", "list", "pos")>;
		} else if (col instanceof TDoubleArrayList) {
			TDoubleArrayList list=(TDoubleArrayList)col;
			<lastIdx("double", "list", "pos")>;
		} else if (col instanceof SArrayList) {
			SArrayList list=(SArrayList)col;
			<lastIdxObj("list", "pos")>;
		} else {
		    Assert.not_implemented("lastIndex()");
		    return -1;
		}
	}

	public void iterate(<visitorClass> v) {
		int pos;
		<forEach("i", "col0")> {
			<if(sortedCol && !inplaceSort)>pos = sortedIdx.getQuick(i);
			<else>pos=i;<endif>	
			boolean cont=v.visit<columns:{c|_<c.absPos>}>
								(<columns:{c|col<i0>(pos)}; separator=",">);
			if (cont) nestedTables.getQuick(pos).iterate(v);
		}
	}
	public void iterate_range(int from, int to, <visitorClass> v) {
		assert virtualSliceNum() > 1;
		if (to >= size()) to = size()-1;
		<fromTo("i", "from", "to")> {		
			boolean cont=v.visit<columns:{c|_<c.absPos>}>
								(<columns:{c|col<i0>(i)}; separator=", ">);
			if (cont) nestedTables.get(i).iterate(v);
		}
	}
<if(first(columns).indexed)>
	public void iterate_by_<first(columns).absPos>(<first(columns).type> a0, <visitorClass> v) {
		TIntList posList=(TIntList)index<first(columns).relPos>.get(a0);
		if (posList==null) return;
		<forEach("i", "posList")> {
			int pos = posList.get(i);
			boolean cont=v.visit<columns:{c|_<c.absPos>}>
							(<columns:{c|col<i0>(pos)}; separator=", ">);
			if (cont) nestedTables.get(pos).iterate(v);
		}
	}
	<if(first(nestedColumns).indexed)>
	public void iterate_by_<first(columns).absPos>_<first(nestedColumns).absPos>(
							<first(columns).type> a0, <first(nestedColumns).type> b0, <visitorClass> v) {
		TIntList posList=(TIntList)index<first(columns).relPos>.get(a0);
		if (posList==null) return;
		<forEach("i", "posList")> {
			int pos = posList.get(i);
			boolean cont=v.visit<columns:{c|_<c.absPos>}>
							(<columns:{c|col<i0>(pos)}; separator=", ">);
			if (cont) nestedTables.get(pos).iterate_by_<first(nestedColumns).absPos>(b0, v);
		}
	}
		<if(first(nestedNestedColumns).indexed)>
		public void iterate_by_<first(columns).absPos>_<first(nestedColumns).absPos>_<first(nestedNestedColumns).absPos>(
						<first(columns).type> a0, <first(nestedColumns).type> b0, <first(nestedNestedColumns).type> c0, <visitorClass> v) {
			TIntList posList=(TIntList)index<first(columns).relPos>.get(a0);
			if (posList==null) return;
			<forEach("i", "posList")> {
				int pos = posList.get(i);
				boolean cont=v.visit<columns:{c|_<c.absPos>}>
								(<columns:{c|col<i0>(pos)}; separator=", ">);
				if (cont) nestedTables.get(pos).iterate_by_<first(nestedColumns).absPos>_first(nestedNestedColumns).absPos>(b0, c0, v);
			}
		}	
		<endif>
	<endif>
	
<endif>
<if(first(nestedColumns).indexed)>
	public void iterate_by_<first(nestedColumns).absPos>(<first(nestedColumns).type> a0, <visitorClass> v) {
		int pos;
		<forEach("i", "col0")> {
			<if(sortedCol && !inplaceSort)>pos = sortedIdx.getQuick(i);
			<else>pos=i;<endif>	
			boolean cont=v.visit<columns:{c|_<c.absPos>}>
								(<columns:{c|col<i0>(pos)}; separator=",">);
			if (cont) nestedTables.getQuick(pos).iterate_by_<first(nestedColumns).absPos>(a0, v);
		}
	}
<endif>

<if(sortedCol)>
	public void iterate_part_<sortedCol.absPos>(<visitorClass> v, <sortedCol.type> val, int cmpOp) {
		int start=0, end=col0.size()-1; 
		<getContainer(sortedCol.type)> $sortedCol;		
	  	<if(inplaceSort)>$sortedCol = col<sortedCol.relPos>;
	  	<else>$sortedCol = sortedCol; <endif>
	  	
	  	int pos = $sortedCol.binarySearch(val);
		if (cmpOp == -2) {        // \<
			if (pos\<0) end=(-pos)-1;
			else end=firstIndex($sortedCol, pos)-1;
		} else if (cmpOp == -1) { // \<=
			if (pos\<0) end=(-pos)-1;
			else end=lastIndex($sortedCol, pos);
		} else if (cmpOp == 0) {  // ==
			if (pos\<0) return;
			else {
				start=firstIndex($sortedCol, pos);
				end=lastIndex($sortedCol, pos);
			}
		} else if (cmpOp == 1) {  // >=
			if (pos\<0) start=(-pos)-1;
			else start=firstIndex($sortedCol, pos);
		} else if (cmpOp == 2) {  // >
			if (pos\<0) start=(-pos)-1;
			else start=lastIndex($sortedCol, pos)+1;	
		} 			 
		<fromTo("i", "start", "end")> {
			<if(inplaceSort)>pos=i;
			<else>pos=sortedIdx.getQuick(i);<endif>		
			boolean cont=v.visit<columns:{c|_<c.absPos>}>
								(<columns:{c|col<i0>(pos)};separator=", ">);
			if (cont) nestedTables.get(pos).iterate(v);			
		}
	}
<endif>

<nestedColumns:{c|<if(c.sorted)>
	public void iterate_part_<c.absPos>(<visitorClass> v, <c.type> val, int cmpOp) {
		for (int i=0; i\<col0.size(); i++) {
			boolean cont=v.visit<columns:{c2|_<c2.absPos>}>
								     (<columns:{c2|col<i0>(i)};separator=", ">);
			if (cont) nestedTables.get(i).iterate_part_<c.absPos>(v, val, cmpOp);			
		\}
	\}
	
  <idxCols:{ic|
	public void iterate_part_<c.absPos>_by_<ic.relPos>(<ic.type> a, <visitorClass> v, <c.type> val, int cmpOp) {
		TIntList posList=null;
		posList= (TIntList)index<ic.relPos>.get(a);
		if(posList==null) return;
		
		for (int i=0; i\<posList.size(); i++) {
			int pos=posList.get(i);
			boolean cont=v.visit<columns:{c2|_<c2.absPos>}>(<columns:{c2|col<i0>(pos)};separator=", ">);
			if (cont) nestedTables.get(pos).iterate_part_<c.absPos>(v, val, cmpOp);
		\}
	\}	
  }> 
<endif> 
}>

	public boolean contains(<columns:{c|<c.type> a<i0>};separator=", "><nestedColumns:{c|, <c.type> b<i0>}>) {
		int pos=-1;		
		int first=0;
		int last=col0.size()-1;		
		<if(idxCols)>
			TIntList posList = index<first(idxCols).relPos>.get(a<first(idxCols).relPos>);
			if (posList==null) return false;			
			for (int i=0; i\<posList.size(); i++) {
				pos=posList.get(i);
				if (<columns:{c|col<i0>.get(pos)<EqOpMap.(c.type)>(a<i0>)}; separator=" && ">) {
					if (nestedTables.get(pos).contains(<nestedColumns:{c|b<i0>};separator=", ">))
						return true;
				}
			}
			if (true) return false;
		<elseif(sortedCol)>
			<getContainer(sortedCol.type)> $sortedCol;
			<if(inplaceSort)>$sortedCol=col<sortedCol.relPos>;
			<else>$sortedCol=sortedCol;<endif>
			
			pos=$sortedCol.binarySearch(a<sortedCol.relPos>);
			if (pos\<0 || pos >=col0.size()) return false;
			
			<if(rest(columns))>
			   	first=firstIndex($sortedCol, pos);
	    		last=lastIndex($sortedCol, pos);
	    	<else>first=last=pos;<endif>
		<endif>
		
		for (int i=first; i\<=last; i++) {
			<if(sortedCol && !inplaceSort)>pos=sortedIdx.getQuick(i);
			<else>pos=i;<endif>
	    	if (<columns:{c|col<i0>.getQuick(pos)<EqOpMap.(c.type)>(a<i0>)};separator="&&">) {
	    		return nestedTables.getQuick(pos).contains(<nestedColumns:{c|b<i0>};separator=", ">);
	    	}
	    }
		return false;
	}
	public boolean contains(<columns:{c|<c.type> a<i0>};separator=", "><nestedColumns:{c|, <c.type> b<i0>}>, boolean[] dontcare) {
		int pos=-1;		
		int first=0;
		int last=col0.size()-1;		
		<if(idxCols)>
		if (!dontcare[<first(idxCols).relPos>]) {
			TIntList posList = index<first(idxCols).relPos>.get(a<first(idxCols).relPos>);
			if (posList==null) return false;			
			for (int i=0; i\<posList.size(); i++) {
				pos=posList.get(i);
				if (<columns:{c|(dontcare[<i0>] || col<i0>.get(pos)<EqOpMap.(c.type)>(a<i0>))}; separator=" && ">) {
					if (nestedTables.get(pos).contains(<nestedColumns:{c|b<i0>};separator=", ">, Arrays.copyOfRange(dontcare, <length(columns)>, dontcare.length)))
						return true;
				}
			}
			if (true) return false;
		}
		<elseif(sortedCol)>
		if (!dontcare[<sortedCol.relPos>]) {
			<getContainer(sortedCol.type)> $sortedCol;
			<if(inplaceSort)>$sortedCol=col<sortedCol.relPos>;
			<else>$sortedCol=sortedCol;<endif>
			
			pos=$sortedCol.binarySearch(a<sortedCol.relPos>);
			if (pos\<0 || pos >=col0.size()) return false;
			
			<if(rest(columns))>
			   	first=firstIndex($sortedCol, pos);
	    		last=lastIndex($sortedCol, pos);
	    	<else>first=last=pos;<endif>
	    }
		<endif>
		
		for (int i=first; i\<=last; i++) {
			<if(sortedCol && !inplaceSort)>pos=sortedIdx.getQuick(i);
			<else>pos=i;<endif>
	    	if (<columns:{c|(dontcare[<i0>] || col<i0>.getQuick(pos)<EqOpMap.(c.type)>(a<i0>))};separator="&&">) {
	    		return nestedTables.getQuick(pos).contains(<nestedColumns:{c|b<i0>};separator=", ">, Arrays.copyOfRange(dontcare, <length(columns)>, dontcare.length));
	    	}
	    }
		return false;
	}
	
	public boolean insert(<columns:{c|<c.type> a<i0>};separator=", "><nestedColumns:{c|, <c.type> b<i0>}>){
	<if(!isNested && !multiSet)>
		if (contains(<columns:{c|a<i0>};separator=","><nestedColumns:{c|, b<i0>}>)) return false;		
	<endif>
			
		int pos=0;
	    int first=0;
		int last=col0.size()-1;
	    if (col0.size()!=0) {
	    	boolean exists;
	    <if(idxCols)>	    	
	    	TIntList posList = index<first(idxCols).relPos>.get(a<first(idxCols).relPos>);
	    	if (posList!=null) {
	    		for (int i=0; i\<posList.size(); i++) {
					pos=posList.get(i);
					<if(rest(columns))>if (true) {
					<else>if(true<columns:{c|&& col<i0>.get(pos)<EqOpMap.(c.type)>(a<i0>)}>) { <endif>
						nestedTables.get(pos).insert(<nestedColumns:{c|b<i0>};separator=", ">);
						return true;
					}
				}
	    	}
	    	exists=false;
	    <elseif(sortedCol)>
	    	<getContainer(sortedCol.type)> $sortedCol;
	    	$sortedCol = <if(inplaceSort)>col<sortedCol.relPos><else>sortedCol<endif>; 
	    	<findPos("pos", "$sortedCol", {a<sortedCol.relPos>}, "exists")>	    	

	    	<if(rest(columns))> // find the first occurrence (for the sorted column)
	    		first = firstIndex($sortedCol, pos);
				last  = lastIndex($sortedCol, pos);
			<else>
				if (exists) { first=last=pos; }
				else { last = pos-1; }
			<endif>
		<else>exists=true;
	    <endif>	    	    
	   		if (exists) {
				for (int i=first; i\<=last; i++) {
					<if(sortedCol && !inplaceSort)>int j = sortedIdx.getQuick(i);
					<else>int j = i;<endif>
					if (<columns:{c|col<i0>.getQuick(j)<EqOpMap.(c.type)>(a<i0>)};separator="&&">) {
		    			nestedTables.getQuick(j).insert(<nestedColumns:{c|b<i0>};separator=", ">);
		    			tupleNum++;
			    		return true;
	    			}	
	    		}
	    	}
	    }
	    
	    <nestedTable> newTable;
	    boolean reuse=false;
	    int realSize=-1;
	    if (nestedTables.size() > col0.size()) {
	    	reuse=true;
	    	newTable = nestedTables.getQuick(col0.size());
	    	assert newTable.isEmpty();
	    	nestedTables.setQuick(col0.size(), null);
	    	realSize = nestedTables.size();
	    	nestedTables.setSize(col0.size());
	    } else { newTable = <nestedTable>.create(); }
	    newTable.insert(<nestedColumns:{c|b<i0>};separator=", ">);
	    	
	    <if(sortedCol && !inplaceSort)>
	    	<columns:{c|col<i0>.add(a<i0>);<\n>}>
	    	nestedTables.add(newTable);
	    	sortedCol.insert(pos, a<sortedCol.relPos>);
	    	sortedIdx.insert(pos, col0.size()-1);
	    <else>
	    	<columns:{c|col<i0>.insert(last+1, a<i0>);<\n>}>
	    	nestedTables.add(last+1, newTable);
	    <endif>
	    
	    if (reuse) nestedTables.setSize(realSize);
	    
	    // add to index
		<idxCols:{ic|index<ic.relPos>.add(a<ic.relPos>, last+1);<\n>}>

<if(gbColumns)>
<if(rest(gbColumns))>
		<gbColumns:{g|groupbyTup._<i0> = a<i0>;<\n>}>;
		groupbyMap.add1(groupbyTup.clone(), last+1);		
<else>	
		groupbyMap.add1(a0, last+1);
<endif>
<endif>		
		tupleNum++;
		return true;
	}
	
	<methods;separator="\n">

<if(gbColumns)> // if(gbColumns) [
	// groupby operations
	<groupbyDyn()>
<endif>  // ] if (gbColumns)
	
	@Override
	public void writeExternal(ObjectOutput out) throws IOException {
		<columns:{c|out.writeObject(col<i0>);<\n>}>		
		out.writeObject(nestedTables);
		<if(sortedCol && !inplaceSort)>
			out.writeObject(sortedIdx);
			out.writeObject(sortedCol);
		<endif>
	}
	
	@Override
	public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException {
		<columns:{c|col<i0>=(<ContainerMap.(c.type)>)in.readObject();<\n>}>
		nestedTables=(SArrayList)in.readObject();
		<if(sortedCol && !inplaceSort)>
			sortedIdx=(SIntArrayList)in.readObject();
			sortedCol=(<getContainer(sortedCol.type)>)in.readObject();
		<endif>
		
		<idxCols:{ic|index<ic.relPos> = new SIndex(<ic.size>, <length(columns)>);<\n>}>
		<idxCols:{ic|
			for(int i=0; i\<col0.size(); i++) {
				index<ic.relPos>.add(col<ic.relPos>.getQuick(i), i);
			\} }>
			
		<if(gbColumns)>
			groupbyMap = new GroupbyMap(col0.size());
			for (int i=0; i\<col0.size(); i++) { 		
			<if(rest(gbColumns))>
				<gbColumns:{g|groupbyTup._<i0> = col<g.relPos>.getQuick(i);<\n>}>;
				groupbyMap.add1(groupbyTup.clone(), i);		
			<else>
				groupbyMap.add1(col<gbColumns.relPos>.getQuick(i), i);
			<endif>
			}
		<endif>
	}
<classes; separator="\n">
}
>>


groupbyDyn() ::= <<
<if(gbNestedColumns)> // if(gbNestedColumns) [
	public <gbAggrColumn.type> groupby(<gbColumns:{c|<c.type> a<i0>};separator=", ">
									   <gbNestedColumns:{c|, <c.type> b<i0>}>) {
<if(rest(gbColumns))>
		<gbColumns:{g|groupbyTup._<i0> = a<i0>;<\n>}>;
		int pos=groupbyMap.get1(groupbyTup);		
<else>
		int pos=groupbyMap.get1(a0);
<endif>
		if (pos \< 0) {
			throw new SociaLiteException("Unexpected groupby operation");
		}
		return nestedTables.getQuick(pos).groupby(<gbNestedColumns:{c|b<i0>};separator=",">);
	}
	public boolean contains(<gbColumns:{c|<c.type> a<i0>};separator=", ">
							<gbNestedColumns:{c|, <c.type> b<i0>}>) {
<if(rest(gbColumns))>
		<gbColumns:{g|groupbyTup._<i0> = a<i0>;<\n>}>;
		int pos=groupbyMap.get1(groupbyTup);		
<else>
		int pos=groupbyMap.get1(a0);
<endif>
		if (pos \< 0) return false;
		return nestedTables.getQuick(pos).contains(<gbNestedColumns:{c|b<i0>};separator=",">);
	}	
	public boolean update(<columns:{c|<c.type> a<i0>};separator=",">
						  <nestedColumns:{c|,<c.type> b<i0>}>) {
<if(rest(gbColumns))>
		<gbColumns:{g|groupbyTup._<i0> = a<i0>;<\n>}>;
		int pos=groupbyMap.get1(groupbyTup);		
<else>
		int pos=groupbyMap.get1(a0);
<endif>
		if (pos \< 0) throw new SociaLiteException("Unexpected update");
		return nestedTables.getQuick(pos).update(<nestedColumns:{c|b<i0>};separator=",">);
	}
<else> // if(!gbNestedColumns) [
	public <gbAggrColumn.type> groupby(<gbColumns:{c|<c.type> a<i0>};separator=", ">) {
<if(rest(gbColumns))>
		<gbColumns:{g|groupbyTup._<i0> = a<i0>;<\n>}>;
		int pos=groupbyMap.get1(groupbyTup);		
<else>
		int pos=groupbyMap.get1(a0);
<endif>
		if (pos \< 0) {
			throw new SociaLiteException("Unexpected groupby operation");
		}
		return col<gbAggrColumn.relPos>.getQuick(pos);
	}	
	public boolean contains(<gbColumns:{c|<c.type> a<i0>};separator=", ">) {
<if(rest(gbColumns))>
		<gbColumns:{g|groupbyTup._<i0> = a<i0>;<\n>}>;
		int pos=groupbyMap.get1(groupbyTup);		
<else>
		int pos=groupbyMap.get1(a0);
<endif>
		if (pos >= 0) return true;
		return false;
	}	
	public boolean update(<columns:{c|<c.type> a<i0>};separator=",">
						  <nestedColumns:{c|,<c.type> b<i0>}>) {
<if(rest(gbColumns))>
		<gbColumns:{g|groupbyTup._<i0> = a<i0>;<\n>}>;
		int pos=groupbyMap.get1(groupbyTup);		
<else>
		int pos=groupbyMap.get1(a0);
<endif>
		if (pos \< 0) {
			return insert(<columns:{c|a<i0>};separator=","><nestedColumns:{c|,b<i0>}>);
		} else {
			<gbAggrColumn.type> gbAggrVal = col<gbAggrColumn.relPos>.getQuick(pos);
			if (!(gbAggrVal<EqOpMap.(gbAggrColumn.type)>(a<gbAggrColumn.relPos>))) {				
				<columns:{c|col<i0>.setQuick(pos, a<i0>);<\n>}>
				nestedTables.getQuick(pos).clear();
			}
			return nestedTables.getQuick(pos).insert(<nestedColumns:{c|b<i0>};separator=",">);
		}	
	} 
<endif>
>>
